package year2019.day20;

import org.junit.jupiter.api.Test;
import utils.Point;

import java.util.*;

import static year2019.day20.Day20.*;
import static org.junit.jupiter.api.Assertions.*;

class Day20Test {



    @Test
    void test20A0() {
        String inputStr=
                         """
                                 A           
                                 A           
                          #######.#########  
                          #######.........#  
                          #######.#######.#  
                          #######.#######.#  
                          #######.#######.#  
                          #####  B    ###.#  
                        BC...##  C    ###.#  
                          ##.##       ###.#  
                          ##...DE  F  ###.#  
                          #####    G  ###.#  
                          #########.#####.#  
                        DE..#######...###.#  
                          #.#########.###.#  
                        FG..#########.....#  
                          ###########.#####  
                                     Z       
                                     Z       
                        """;
        List<String> input = Arrays.asList(inputStr.split("\n"));
        makeMap(input);
        //Point.print(map);
        assertEquals(23, findShortestRoute(false));

    }


    @Test
    void test20A1() {
        String inputStr=
                        """
                                           A               
                                           A               
                          #################.#############  
                          #.#...#...................#.#.#  
                          #.#.#.###.###.###.#########.#.#  
                          #.#.#.......#...#.....#.#.#...#  
                          #.#########.###.#####.#.#.###.#  
                          #.............#.#.....#.......#  
                          ###.###########.###.#####.#.#.#  
                          #.....#        A   C    #.#.#.#  
                          #######        S   P    #####.#  
                          #.#...#                 #......VT
                          #.#.#.#                 #.#####  
                          #...#.#               YN....#.#  
                          #.###.#                 #####.#  
                        DI....#.#                 #.....#  
                          #####.#                 #.###.#  
                        ZZ......#               QG....#..AS
                          ###.###                 #######  
                        JO..#.#.#                 #.....#  
                          #.#.#.#                 ###.#.#  
                          #...#..DI             BU....#..LF
                          #####.#                 #.#####  
                        YN......#               VT..#....QG
                          #.###.#                 #.###.#  
                          #.#...#                 #.....#  
                          ###.###    J L     J    #.#.###  
                          #.....#    O F     P    #.#...#  
                          #.###.#####.#.#####.#####.###.#  
                          #...#.#.#...#.....#.....#.#...#  
                          #.#####.###.###.#.#.#########.#  
                          #...#.#.....#...#.#.#.#.....#.#  
                          #.###.#####.###.###.#.#.#######  
                          #.#.........#...#.............#  
                          #########.###.###.#############  
                                   B   J   C               
                                   U   P   P               
                        """;
        List<String> input = Arrays.asList(inputStr.split("\n"));
        makeMap(input);
        //Point.print(map);
        assertEquals(58, findShortestRoute(false));
    }

    @Test
    void test20B0() {
        String inputStr=
                        """
                                 A           
                                 A           
                          #######.#########  
                          #######.........#  
                          #######.#######.#  
                          #######.#######.#  
                          #######.#######.#  
                          #####  B    ###.#  
                        BC...##  C    ###.#  
                          ##.##       ###.#  
                          ##...DE  F  ###.#  
                          #####    G  ###.#  
                          #########.#####.#  
                        DE..#######...###.#  
                          #.#########.###.#  
                        FG..#########.....#  
                          ###########.#####  
                                     Z       
                                     Z       
                        """;

        List<String> input = Arrays.asList(inputStr.split("\n"));
        makeMap(input);

        assertEquals(26, findShortestRoute(true));
    }

    @Test
    void test20B1() {
        String inputStr= """
                                     Z L X W       C                 
                                     Z P Q B       K                 
                          ###########.#.#.#.#######.###############  
                          #...#.......#.#.......#.#.......#.#.#...#  
                          ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  
                          #.#...#.#.#...#.#.#...#...#...#.#.......#  
                          #.###.#######.###.###.#.###.###.#.#######  
                          #...#.......#.#...#...#.............#...#  
                          #.#########.#######.#.#######.#######.###  
                          #...#.#    F       R I       Z    #.#.#.#  
                          #.###.#    D       E C       H    #.#.#.#  
                          #.#...#                           #...#.#  
                          #.###.#                           #.###.#  
                          #.#....OA                       WB..#.#..ZH
                          #.###.#                           #.#.#.#  
                        CJ......#                           #.....#  
                          #######                           #######  
                          #.#....CK                         #......IC
                          #.###.#                           #.###.#  
                          #.....#                           #...#.#  
                          ###.###                           #.#.#.#  
                        XF....#.#                         RF..#.#.#  
                          #####.#                           #######  
                          #......CJ                       NM..#...#  
                          ###.#.#                           #.###.#  
                        RE....#.#                           #......RF
                          ###.###        X   X       L      #.#.#.#  
                          #.....#        F   Q       P      #.#.#.#  
                          ###.###########.###.#######.#########.###  
                          #.....#...#.....#.......#...#.....#.#...#  
                          #####.#.###.#######.#######.###.###.#.#.#  
                          #.......#.......#.#.#.#.#...#...#...#.#.#  
                          #####.###.#####.#.#.#.#.###.###.#.###.###  
                          #.......#.....#.#...#...............#...#  
                          #############.#.#.###.###################  
                                       A O F   N                     
                                       A A D   M                     
                        """;
        List<String> input = Arrays.asList(inputStr.split("\n"));
        makeMap(input);
        //Point.print(map);

        assertEquals(396, findShortestRoute(true));
    }

    @Test
    void newMethod1() {
        String inputStr=
                        """ 
                                A           
                                A           
                         #######.#########  
                         #######.........#  
                         #######.#######.#  
                         #######.#######.#  
                         #######.#######.#  
                         #####  B    ###.#  
                       BC...##  C    ###.#  
                         ##.##       ###.#  
                         ##...DE  F  ###.#  
                         #####    G  ###.#  
                         #########.#####.#  
                       DE..#######...###.#  
                         #.#########.###.#  
                       FG..#########.....#  
                         ###########.#####  
                                    Z       
                                    Z       
                       """;

        List<String> input = Arrays.asList(inputStr.split("\n"));
        makeMap(input);

        assertEquals(23, findShortestRoute(false)); //without counting portals
        assertEquals(26, findShortestRoute(true)); //without counting portals
    }

}